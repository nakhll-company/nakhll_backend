# Generated by Django 3.2.14 on 2022-07-16 07:08

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions

from bank.constants import NAKHLL_ACCOUNT_ID


def create_nakhll_account(apps, schema_editor):
    from bank.constants import NAKHLL_ACCOUNT_ID
    Account = apps.get_model("bank", "Account")
    Account.objects.create(id=NAKHLL_ACCOUNT_ID)


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance', models.PositiveIntegerField(default=0)),
                ('blocked_balance', models.PositiveIntegerField(default=0)),
                ('cashable_amount', models.PositiveIntegerField(default=0)),
                ('blocked_cashable_amount', models.PositiveIntegerField(default=0)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, unique=True)),
            ],
            options={
                'verbose_name': 'Account',
                'verbose_name_plural': 'Accounts',
            },
        ),
        migrations.RunPython(create_nakhll_account, migrations.RunPython.noop),
        migrations.CreateModel(
            name='AccountRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.PositiveIntegerField()),
                ('request_type', models.IntegerField(choices=[(0, 'درخواست تسویه')])),
                ('description', models.CharField(max_length=1023)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_confirmed', models.DateTimeField(blank=True, null=True)),
                ('date_rejected', models.DateTimeField(blank=True, null=True)),
                ('from_account', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='from_account_request', to='bank.account')),
                ('to_account', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='to_account_request', to='bank.account')),
            ],
            options={
                'verbose_name': 'AccountRequest',
                'verbose_name_plural': 'AccountRequest',
            },
        ),
        migrations.CreateModel(
            name='CoinMintage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.PositiveIntegerField(verbose_name='مقدار')),
                ('description', models.TextField(verbose_name='توضیحات')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='ضرب کننده سکه')),
            ],
            options={
                'verbose_name': 'ضرب سکه',
                'verbose_name_plural': 'ضرب های سکه',
            },
        ),
        migrations.CreateModel(
            name='CoinFuel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.PositiveIntegerField(verbose_name='مقدار')),
                ('description', models.TextField(verbose_name='توضیحات')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='سوزاننده سکه')),
            ],
            options={
                'verbose_name': 'Fuel',
                'verbose_name_plural': 'Fuels',
            },
        ),
        migrations.CreateModel(
            name='AccountTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField()),
                ('cashable', models.BooleanField(default=False)),
                ('description', models.CharField(max_length=1023)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_transaction', to='bank.account')),
                ('account_opposite', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='account_opposite_transaction', to='bank.account')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bank.accountrequest')),
            ],
            options={
                'verbose_name': 'AccountTransaction',
                'verbose_name_plural': 'AccountTransaction',
            },
        ),
        migrations.AddConstraint(
            model_name='account',
            constraint=models.CheckConstraint(check=models.Q(models.Q(models.Q(('pk', 1), _negated=True), models.Q(('user', None), _negated=True)), models.Q(('pk', 1), ('user', None)), _connector='OR'), name='only_nakhll_account_can_have_null_user'),
        ),
        migrations.AddConstraint(
            model_name='account',
            constraint=models.CheckConstraint(check=models.Q(('balance__gte', django.db.models.expressions.F('blocked_balance'))), name='balance_is_more_than_or_equal_to_blocked_balance'),
        ),
        migrations.AddConstraint(
            model_name='account',
            constraint=models.CheckConstraint(check=models.Q(('cashable_amount__gte', django.db.models.expressions.F('blocked_cashable_amount'))), name='cashable_amount_is_more_than_or_equal_to_blocked_cashable_amount'),
        ),
        migrations.AddConstraint(
            model_name='account',
            constraint=models.CheckConstraint(check=models.Q(('balance__gte', django.db.models.expressions.F('cashable_amount'))), name='balance_is_more_than_or_equal_to_cashable_amount'),
        ),
    ]
